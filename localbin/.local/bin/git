#!/usr/bin/env bash
# git wrapper â€“ run gitleaks before "git add", unless --override
#   â€¢ honours .gitignore
#   â€¢ uses custom rules at ~/.config/gitleaks/.gitleaks.toml
#   â€¢ skips commit history so the scan stays fast

###############################################################################
# 0. Stop recursion                                                                  #
###############################################################################
if [[ -n "$GIT_WRAPPER_SENTINEL" ]]; then
  exec "$GIT_WRAPPER_SENTINEL" "$@"
fi

###############################################################################
# 1. Remove *this* directory from PATH, then locate the real git                #
###############################################################################
WRAPPER_DIR="$(cd "$(dirname "$0")" && pwd -P)"
export PATH="$(printf '%s' "$PATH" | tr ':' '\n' | grep -v -F "$WRAPPER_DIR" | paste -sd ':' -)"
REAL_GIT="$(command -v git)"
export GIT_WRAPPER_SENTINEL="$REAL_GIT"

###############################################################################
# 2. Intercept only `git add`                                                   #
###############################################################################
if [[ $1 == "add" ]]; then
  shift
  override=0; args=()

  for arg in "$@"; do
    case "$arg" in
      --override) override=1 ;;
      -h|--help)  exec "$REAL_GIT" add -h ;;
      *)          args+=("$arg") ;;
    esac
  done

  if (( override == 0 )); then
    GITLEAKS_CONFIG="${GITLEAKS_CONFIG:-$HOME/.config/gitleaks/.gitleaks.toml}"

    # Build list of candidate files that would be added (tracked-modified or
    # untracked) while respecting .gitignore via Git itself. Scan each file
    # individually so ignored paths never reach gitleaks.
    mapfile -d '' scan_files < <(
      git ls-files -z --cached --others --exclude-standard -- "${args[@]:-.}"
    )
    for file in "${scan_files[@]}"; do
      [[ -z "$file" ]] && continue
      gitleaks detect \
        -c "$GITLEAKS_CONFIG" \
        --no-git \
        -s "$file" \
        --verbose
      status=$?
      if (( status != 0 )); then
        echo "ðŸš«  Gitleaks caught secrets in '$file'."
        echo "    Fix them or rerun with '--override' if you *really* want to stage anyway."
        exit $status
      fi
    done
  fi

  exec "$REAL_GIT" add "${args[@]}"
else
  exec "$REAL_GIT" "$@"
fi